{"name":"PHPCsvParser","tagline":"Convert CSV to array/Iterator (Excel style is fully suppoted!)","body":"PHPCsvParser\r\n============\r\n\r\nConvert CSV to array/Iterator (Excel style is fully suppoted!)\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/kzykhys/php-csv-parser/v/stable.png)](https://packagist.org/packages/kzykhys/php-csv-parser)\r\n[![Build Status](https://travis-ci.org/kzykhys/PHPCsvParser.png?branch=master)](https://travis-ci.org/kzykhys/PHPCsvParser)\r\n[![Coverage Status](https://coveralls.io/repos/kzykhys/PHPCsvParser/badge.png)](https://coveralls.io/r/kzykhys/PHPCsvParser)\r\n\r\nWhy PHPCsvParser?\r\n-----------------\r\n\r\nAs you know, PHP has built-in `fgetcsv` function.\r\nBut has some probrems:\r\n\r\n* Line breaks in the cell\r\n* Multibyte string (especially NON UTF-8)\r\n* Double quote in the cell\r\n\r\nRequirements\r\n------------\r\n\r\n**PHP5.3.3 or later**\r\n\r\nInstallation\r\n------------\r\n\r\nCreate or modify your composer.json\r\n\r\n``` json\r\n{\r\n    \"require\": {\r\n        \"kzykhys/php-csv-parser\": \"~1.1.0\"\r\n    }\r\n}\r\n```\r\n\r\nAnd run\r\n\r\n``` sh\r\n$ php composer.phar install\r\n```\r\n\r\nUsage\r\n-----\r\n\r\n### Parse a CSV file\r\n\r\n```\r\n1,\"some text\",150\r\n2,\"some multi line\r\ntext\",2000\r\n```\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$parser = \\KzykHys\\CsvParser\\CsvParser::fromFile('./test.csv');\r\n$result = $parser->parse();\r\n\r\nvar_dump($result);\r\n```\r\n\r\nThis is the same as:\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$iterator = new \\SplFileObject('./test.csv');\r\n$parser = new \\KzykHys\\CsvParser\\CsvParser($iterator);\r\n$result = $parser->parse();\r\n\r\nvar_dump($result);\r\n```\r\n\r\n### Parse from string\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$parser = \\KzykHys\\CsvParser\\CsvParser::fromString($string);\r\n$result = $parser->parse();\r\n\r\nvar_dump($result);\r\n```\r\n\r\n### Parse from array/Iterator\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$parser = \\KzykHys\\CsvParser\\CsvParser::fromArray(array('a,b,c,d', 'e,f,g,h'));\r\n$result = $parser->parse();\r\n\r\n$iterator = new ArrayIterator(array('a,b,c,d', 'e,f,g,h'));\r\n$parser2 = new \\KzykHys\\CsvParser\\CsvParser($iterator);\r\n$result2 = $parser2->parse();\r\n\r\nvar_dump($result);\r\nvar_dump($result2);\r\n```\r\n\r\n### Handling Large files\r\n\r\nThe class `\\KzykHys\\CsvParser\\CsvParser` itself is `Traversable`.\r\nso You can convert CSV lines on-the-fly.\r\n\r\nFollowing example is the best choice for performance:\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$parser = \\KzykHys\\CsvParser\\CsvParser::fromFile('./test.csv');\r\n\r\nforeach ($parser as $record) {\r\n    // handles each record\r\n    var_dump($record);\r\n}\r\n```\r\n\r\n### Options\r\n\r\nYou can pass the options to 2nd argument of each static methods.\r\n\r\n* CsvParser::fromFile($file, **$options**);\r\n* CsvParser::fromString($string, **$options**);\r\n* CsvParser::fromArray($array, **$options**);\r\n* new CsvParser($iterator, **$options**);\r\n\r\nAvailable options are:\r\n\r\n| Option     | Type           | Description                                           | Default |\r\n| ---------- |--------------- | ----------------------------------------------------- | ------- |\r\n| delimiter  | string         | The field delimiter (one character only)              | ,       |\r\n| enclosure  | string         | The field enclosure character (one character only)    | \"       |\r\n| encoding   | string         | The type of encoding                                  | CP932   |\r\n| offset     | integer (>=0)  | The sequence will start at that offset                | 0       |\r\n| limit      | integer (>=-1) | Limit maximum count of records                        | -1      |\r\n| header     | array or false | Use the specified index instead of the column number  | false   |\r\n\r\nAuthor\r\n------\r\nKazuyuki Hayashi (@kzykhys)\r\n\r\nChangelog\r\n---------\r\n\r\nsee [CHANGELOG](CHANGELOG.md)\r\n\r\nLicense\r\n-------\r\n\r\n[The MIT License](LICENSE)","google":"UA-39381632-2","note":"Don't delete this file! It's used internally to help with page regeneration."}