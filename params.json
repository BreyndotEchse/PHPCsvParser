{"name":"PHPCsvParser","tagline":"Convert CSV to array (Excel style is fully suppoted!)","body":"PHPCsvParser\r\n============\r\n\r\nConvert CSV to array/Iterator (Excel style is fully suppoted!)\r\n\r\nWhy PHPCsvParser?\r\n-----------------\r\n\r\nAs you know, PHP has built-in `fgetcsv` function.\r\nBut has some probrems:\r\n\r\n* Line breaks in the cell\r\n* Multibyte string (especially NON UTF-8)\r\n\r\nRequirements\r\n------------\r\n\r\n**PHP5.3.3 or later**\r\n\r\nInstallation\r\n------------\r\n\r\nCreate or modify your composer.json\r\n\r\n```\r\n{\r\n    \"require\": {\r\n        \"kzykhys/php-csv-parser\": \"~1.1.0\"\r\n    }\r\n}\r\n```\r\n\r\nAnd run\r\n\r\n``` sh\r\n$ php composer.phar install\r\n```\r\n\r\nUsage\r\n-----\r\n\r\n### Parse a CSV file\r\n\r\n```\r\n1,\"some text\",150\r\n2,\"some multi line\r\ntext\",2000\r\n```\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$parser = \\KzykHys\\CsvParser\\CsvParser::fromFile('./test.csv');\r\n$result = $parser->parse();\r\n\r\nvar_dump($result);\r\n```\r\n\r\nThis is the same as:\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$iterator = new \\KzykHys\\CsvParser\\Iterator\\FileIterator('./test.csv');\r\n$parser = new \\KzykHys\\CsvParser\\CsvParser($iterator);\r\n$result = $parser->parse();\r\n\r\nvar_dump($result);\r\n```\r\n\r\n### Parse from string\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$parser = \\KzykHys\\CsvParser\\CsvParser::fromString($string);\r\n$result = $parser->parse();\r\n\r\nvar_dump($result);\r\n```\r\n\r\n### Parse from array/Iterator\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$parser = \\KzykHys\\CsvParser\\CsvParser::fromArray(array('a,b,c,d', 'e,f,g,h'));\r\n$result = $parser->parse();\r\n\r\n$iterator = new ArrayIterator(array('a,b,c,d', 'e,f,g,h'));\r\n$parser2 = new \\KzykHys\\CsvParser\\CsvParser($iterator);\r\n$result2 = $parser2->parse();\r\n\r\nvar_dump($result);\r\nvar_dump($result2);\r\n```\r\n\r\n### Handling Large files\r\n\r\nThe class `\\KzykHys\\CsvParser\\CsvParser` itself is `Traversable`.\r\nso You can convert CSV lines on-the-fly.\r\n\r\nFollowing example is the best choice for performance:\r\n\r\n``` php\r\n<?php\r\n\r\nrequire('./vendor/autoload.php');\r\n\r\n$parser = \\KzykHys\\CsvParser\\CsvParser::fromFile('./test.csv');\r\n\r\nforeach ($parser as $record) {\r\n    // handles each record\r\n    var_dump($record);\r\n}\r\n```\r\n\r\nAuthor\r\n------\r\nKazuyuki Hayashi (@kzykhys)\r\n\r\nChangelog\r\n---------\r\n\r\n1.2.0:\r\n    * Added new class CsvIterator\r\n    * \\IteratorAggregate support for CsvParser\r\n\r\n1.1.0:\r\n    * 1st argument of CsvParser::__constructor is now \\Iterator\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) 2013 Kazuyuki Hayashi\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\nSoftware, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":"UA-39381632-2","note":"Don't delete this file! It's used internally to help with page regeneration."}